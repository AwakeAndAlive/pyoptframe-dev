install.packages("irace!")
install.packages("irace")
clear
q()
library(irace)
irace("irace.config")
irace("irace.config")
irace("irace.config")
irace("irace.config")
irace("irace.config")
irace("irace.config")
irace("irace.config")
q()
library(irace)
irace("irace.config")
q()
library(irace)
irace("irace.config")
q()
load(irace)
load("irace.Rdata")
iraceResults$irace.version
summary(iraceResults)
print(iraceResults$testing)
q()
load("irace.Rdata")
print(iraceResults)
print(iraceResults$allElites)
print(iraceResults$allElites)
print(elite_configs)
elite_configs <- all_configs[all_configs$.ID. %in% elite_ids, ]
# Carregar o pacote irace
library(irace)

# Carregar o arquivo de resultados
load("irace.Rdata")

# Verificar se o objeto iraceResults existe
if (exists("iraceResults")) {
  # Verificar se allConfigurations está presente no objeto iraceResults
  if ("allConfigurations" %in% names(iraceResults)) {
    # IDs das configurações elite
    elite_ids <- iraceResults$allElites[[1]]
    
    # Todas as configurações
    all_configs <- iraceResults$allConfigurations
    
    # Verificar se all_configs está carregado corretamente
    if (!is.null(all_configs)) {
      # Filtrar as configurações elite
      elite_configs <- all_configs[all_configs$.ID. %in% elite_ids, ]
      
      # Imprimir as configurações elite
      print(elite_configs)
    } else {
      print("allConfigurations está vazio ou não foi carregado corretamente.")
    }
  } else {
    print("O objeto iraceResults não contém allConfigurations.")
  }
} else {
  print("O objeto iraceResults não foi encontrado.")
}

# Carregar o pacote irace e o arquivo de resultados
library(irace)
load("irace.Rdata")

# IDs das configurações elite
elite_ids <- iraceResults$allElites[[1]]

# Todas as configurações
all_configs <- iraceResults$allConfigurations

# Configurações elite
elite_configs <- all_configs[all_configs$.ID. %in% elite_ids, ]

# Resultados dos experimentos
experiments <- iraceResults$experiments

# Filtrar os resultados dos experimentos para as configurações elite
elite_experiments <- experiments[, elite_ids]

# Calcular a média dos resultados dos experimentos para cada configuração elite
mean_experiments <- colMeans(elite_experiments, na.rm = TRUE)

# Identificar a melhor configuração (menor valor é melhor)
best_elite_id <- elite_ids[which.min(mean_experiments)]
best_elite_config <- elite_configs[elite_configs$.ID. == best_elite_id, ]

# Imprimir a melhor configuração elite
print(best_elite_config)

q()
